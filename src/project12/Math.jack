// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array mask;

    /** Initializes the library. */
    function void init() {
        var int i;

        let mask = Array.new(16);
        let i = 1;
        let mask[0] = 1;
        while (i < 16) {
            let mask[i] = mask[i-1] + mask[i-1];
            let i = i + 1;
        }
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return -x;
        } else {
            return x;
        }
    }

    /** Returns the product of x and y.
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shiftedX, i;

        let sum = 0;
        let i = 0;
        let shiftedX = x;

        while (i < 16) {
            if (Math.bit(y, i)) {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let i = i + 1;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
     function int divide(int x, int y) {
         var int ret, absX, absY, q;

         let absX = Math.abs(x);
         let absY = Math.abs(y);

         if (absY > absX) {
             return 0;
         }

         let q = Math.divide(absX, 2 * absY);
         if ((absX - (2 * q * absY)) < absY) {
             let ret =  2 * q;
         } else {
             let ret = 2 * q + 1;
         }

         if ((x < 0) = (y < 0)) {
             return ret;
         } else {
             return -ret;
         }
     }


    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int ret, j, temp, temp_pow;

        let j = 7;
        let ret = 0;
        while (~(j < 0)) {
            let temp = ret + mask[j];
            let temp_pow = temp * temp;
            if (~(temp_pow > x) & (temp_pow > 0)) {
                let ret = temp;
            }
            let j = j - 1;
        }
        return ret;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        } else {
            return b;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        } else {
            return b;
        }
    }

    function boolean bit(int x, int i) {
        return ~((mask[i] & x) = 0);
    }

}
