// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */
class Memory {
    static Array Mem;
    static Array freeList;

    /** Initializes the class. */
    function void init() {
        let Mem = 0;
        let freeList = 2048; // heap base
        let freeList[0] = 14335; // heap length;
        let freeList[1] = null;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return Mem[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let Mem[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int ptr, segment_size;
        var Array segment;

        let segment = freeList;
        while (true) {
            let segment_size = segment[0];
            if (segment_size > size + 2) {
                let ptr = segment + (segment_size - (size));
                let ptr[-1] = size + 1;
                let segment[0] = segment_size - (size + 1);
                return ptr;
            } else {
                if (~segment[1]) {
                    return 0;
                }
                let segment = segment[1];
            }
        }
        return 0;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var Array segment;

        let segment = o - 1;
        let segment[1] = freeList;
        let freeList = segment;
        return;
    }
}
