// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {
    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
        Decode(instruction=instruction, instrt=instrt, useM=useM, zx=zx, zy=zy, nx=nx, ny=ny, f=f, no=no, la=la, ld=ld, lm=writeM, jmp=jmp);
        And16(a=instruction, b[15]=false, b[0..14]=true, out=instAddr);
        Mux16(a=instAddr, b=ALUout, sel=instruction[15], out=ARegin);
        ARegister(in=ARegin, load=la, out=ARegout, out[0..14]=addressM);
        DRegister(in=ALUout, load=ld, out=ALUlhs);
        Mux16(a=ARegout, b=inM, sel=useM, out=ALUrhs);
        ALU(x=ALUlhs, y=ALUrhs, zx=zx, nx=nx, zy=zy, ny=ny, f=f, no=no, out=ALUout, out=outM, zr=zr, ng=ng);
        PCRegister(a=ARegout, jmp=jmp, zr=zr, ng=ng, reset=reset, pc=pc);
}
